%% Xiangyu DING: Simulation trend-cycle two volatility shock

% This file loads value and policy functions generated by MPPsolve to
% simulate the endowment economy. Then proceeds to calculate moments

% Sudden stop crisis 
% Definition A: Bianchi, Liu and Mendoza (2016; JIE)
%    Condition 1: Borrowing constraint binds
%    Condition 2: CA/Y is 2 std away positive

% Definition B: Reyes-Heroles and Tenorio (2020, JIE) & Flemming L'Huillier
% and Piguillemc (2019 JIE)
%    Condition 1: Borrowing constraint binds

% Definition C: Seoane and Yurdagul (2019, JIE)
%    Condition 1: At least 2% fall of output Y
%    Condition 2  At least 2% increase of export/output NX/Y
% This could be due to the author think it is not in general OK to use 

clear;
%% 0. Simulation Option
T=200000;   % Total effective period of simulation
cut=1000;  % Initial condition dependence

SSdefinition=0; % 1 for Definition A; 0 for Definition B

%% 1. Allocates Grids and initial values for simulation
load Solution/LowBound/nocorr_rra02ies05.mat    % Loads previous results

%% 1.1 simulation of the exogenous variable
% Uses the big transition matrix to generate a simulation of (T+cut)
% periods.
% S_index = simulate(dtmc(Prob), T+cut+1)'; % use the original matlab func
[S_index,~]=markov(Prob,T+cut+1,1,1:length(Prob));

%% 1.2 Initialize vectors for laissez-faire equilibirum 
bpSIM=zeros(T+cut,1);       % Next period Debt
bSIM=zeros(T+cut,1);        % This period debt
WfSIM=zeros(T+cut,1);       % Welfare gain
bindSIM=zeros(T+cut,1);     % Indicator of binding debt constraint
ctSIM=zeros(T+cut,1);        % Consumption

%% 1.3 Initialize vectors for Social Planner simulation
bpSP_SIM=zeros(T+cut,1);    % Next period Debt
bSP_SIM=zeros(T+cut,1);    % Next period Debt
bindSP_SIM=zeros(T+cut,1);  % Indicator of binding constraint
ctSP_SIM=zeros(T+cut,1);     % Consumption
Tau_SIM=zeros(T+cut,1);     % Tax

%% 1.4 Initatize the vectors for bond and bond policy
bpSIM(1)=bmax+(bmin-bmax)/2;        % t=0 period debt
bpSP_SIM(1)=bmax+(bmin-bmax)/2;     % t=0 period debt for Social Planner


%% 1.5 Simulation of exogenous variable

% levels
ytSIM=yt(1,S_index)';        % Simulated tradable goods path
ynSIM=yn(1,S_index)';        % Simulated nontradable goods path
zSIM=z(1,S_index)';          % Relative shock path
gSIM=g(1,S_index)';          % Permenzant shock path
RSIM=R(1,S_index)';          % interest rate path
%kappaSIM=kappa(1,S_index)';  % constaint path
qSIM=1./(1+R(1,S_index)');   % bond price path

% Vols
volz = exp(zvGrids(2,:));
volg = exp(gvGrids(2,:));

volzSIM=volz(1,S_index)';     % Simulated relative shock volatility path
volgSIM=volg(1,S_index)';     % Simulated relative shock volatility path

%% 2 Recursive evolution of endogenous variables
for tt=2:T+cut
      
    %% 2.1 Decentralized equilibrium simulations
    % Get next period debt (i+1) given by debt policy (bp) and current debt
    % chosen last period: bpSIM(i-i) is period (i) debt.
    bSIM(tt)=bpSIM(tt-1); 
    bpSIM(tt)=min(max(interp1(B,bp(:,S_index(tt)),bSIM(tt),'linear'),bmin),bmax);
    ctSIM(tt)=bSIM(tt)+ytSIM(tt)-qSIM(tt)*bpSIM(tt)*gSIM(tt);
    
    
    %% 2.2 Social planner simulations
    bSP_SIM(tt)=bpSP_SIM(tt-1);
    bpSP_SIM(tt)=min(max(interp1(B,bpSP(:,S_index(tt)),bSP_SIM(tt),'linear'),bmin),bmax);
    ctSP_SIM(tt)=bSP_SIM(tt)+ytSIM(tt)-qSIM(tt)*bpSP_SIM(tt)*gSIM(tt);
    
    % Optimal Macro-Prudential tax per period: Tau is define on the SP equilibirum
    Tau_SIM(tt)=interp1(B,Tau(:,S_index(tt)),bSP_SIM(tt),'linear');
    % Consumption equivalent welfare gain
    WfSIM(tt)=interp1(B,Wf(:,S_index(tt)), bSIM(tt),'linear');
end

%% 2.3 Get Nontradable prices that clear markets
pSIM=(1-omega)/omega*(ctSIM./ynSIM).^(1+ita);         % Decentralized Equilibrium
pSP_SIM=(1-omega)/omega*(ctSP_SIM./ynSIM).^(1+ita);   % Social Planner's

%% 2.4 Debt limits:

% defined by the borrowing constaint
bplim_SIM=-(1+RSIM).*kappa.*(pSIM.*ynSIM+ytSIM)./gSIM;    
bplimSP_SIM=-(1+RSIM).*kappa.*(pSP_SIM.*ynSIM+ytSIM)./gSIM;

% Identify if the constraint was binding:
%%%%% IMPORTANT TO USE TOLERANCE NOT <= %%%%%%%%%%%%
bindSIM((bpSIM-bplim_SIM)<=1e-5)=1;
bindSP_SIM((bpSP_SIM-bplimSP_SIM)<=1e-5)=1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Asign debt to limits when binding 
bpSIM(bindSIM==1)=bplim_SIM(bindSIM==1);
bpSP_SIM(bindSP_SIM==1)=bplimSP_SIM(bindSP_SIM==1);

 
%% 2.5 Current account and Net export
% net export = tradable output - tradable consumption
NX_SIM = ytSIM-ctSIM;
NXSP_SIM = ytSIM-ctSP_SIM;
% current account = delta NFA = NX-r*bp
CA_SIM = bpSIM.*gSIM-bSIM; % bp is todays' NFA after borrowing, b is yesterdays'
CASP_SIM = bpSP_SIM.*gSIM-bSP_SIM;


%% 3. Eliminate Initial Condition Dependency
% exogenous variable
S_index=S_index(cut+1:T+cut)';
ynSIM=ynSIM(cut+1:T+cut);
ytSIM=ytSIM(cut+1:T+cut);
zSIM=zSIM(cut+1:T+cut);
gSIM=gSIM(cut+1:T+cut);
RSIM=RSIM(cut+1:T+cut);
qSIM=qSIM(cut+1:T+cut);
volgSIM=volgSIM(cut+1:T+cut);
volzSIM=volzSIM(cut+1:T+cut);

% endogenous vairbles
bSIM=bSIM(cut+1:T+cut);
bpSIM=bpSIM(cut+1:T+cut);
bindSIM=bindSIM(cut+1:T+cut);
bplim_SIM=bplim_SIM(cut+1:T+cut);
ctSIM=ctSIM(cut+1:T+cut);
pSIM=pSIM(cut+1:T+cut);
NX_SIM=NX_SIM(cut+1:T+cut);
CA_SIM= CA_SIM(cut+1:T+cut);

bSP_SIM=bSP_SIM(cut+1:T+cut);
bpSP_SIM=bpSP_SIM(cut+1:T+cut);
bindSP_SIM=bindSP_SIM(cut+1:T+cut);
bplimSP_SIM=bplimSP_SIM(cut+1:T+cut);
ctSP_SIM=ctSP_SIM(cut+1:T+cut);
pSP_SIM=pSP_SIM(cut+1:T+cut);
NXSP_SIM=NXSP_SIM(cut+1:T+cut);
CASP_SIM=CASP_SIM(cut+1:T+cut);

% tax and wefare
Tau_SIM=Tau_SIM(cut+1:T+cut);
WfSIM=WfSIM(cut+1:T+cut);

%% 4. Regular Moment
% Notice that variables are detrended: 

% Total (Detrended) Nominal Income: tradables + price*nontradables 
Y_SIM=ytSIM+pSIM.*ynSIM;   
YSP_SIM=ytSIM+pSP_SIM.*ynSIM;

% Current Account / GDP: 
CA_SIM=CA_SIM./Y_SIM; 
CASP_SIM=CASP_SIM./YSP_SIM;
% Change in CurrentAccount / GDP indicator
CAchg_SIM=CA_SIM(2:end)-CA_SIM(1:end-1);
CAchg_SIM=[0;CAchg_SIM];

% Leverage indicator: next period's bond holding/current income
Lev_SIM=bpSIM./Y_SIM.*gSIM;  % Lev= b(t+1)/Y(t)= [b(t+1)/gamma(t)]/[Y(t)/gamma(t-1)] * [gamma(t)/gamma(t-1)]  
LevSP_SIM=bpSP_SIM./YSP_SIM.*gSIM;
% Real exchange rate: decrease means real appreciation
RER_SIM=(omega^(1/(1+ita))+(1-omega)^(1/(1+ita)).*pSIM.^(ita/(1+ita))).^((-1-ita)/ita);
RERSP_SIM=(omega^(1/(1+ita))+(1-omega)^(1/(1+ita)).*pSP_SIM.^(ita/(1+ita))).^((-1-ita)/ita);

%%%%%%% Parameter %%%%%%%%%%%%%%%%%%%%
nbd=3; % periods before and after crisis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc;
clear SS
SS=zeros(T,1);      % Indicator for sudden stop
SS_SP=zeros(T,1);   % Indicator for sudden stop under Social Planner's regime

% Crisis is defined as current account goes 2 sd away and collateral
% constraint binds
SS(CA_SIM>(mean(CA_SIM)+2*std(CA_SIM)) & bindSIM>0)=1; 

% CAVEAT: for SP, also use the mean and std of decentralized CA/Y
SS_SP(CASP_SIM>(mean(CA_SIM)+2*std(CA_SIM)) & bindSP_SIM>0)=1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Prints results. 
fprintf(' \n ');
fprintf('The long-run probability of crisis in DE is: ');
fprintf('%5.4f \n ',  mean(SS));    
fprintf('The long-run probability of crisis in SP is: ');
fprintf('%5.4f \n ',  mean(SS_SP));

fprintf('The long-run probability of bingding constraint in DE is: ');
fprintf('%5.4f \n ',  mean(bindSIM));
fprintf('The long-run probability of bingding constraint in SP is: ');
fprintf('%5.4f \n ',  mean(bindSP_SIM));

fprintf('std of CA/Y DE is: ');
fprintf('%5.4f \n ',  std(CA_SIM));

fprintf('std of CA/Y SP is: ');
fprintf('%5.4f \n ',  std(CASP_SIM));

fprintf('mean debt/Y level in DE is: ');
fprintf('%5.4f \n ',  mean(Lev_SIM));

fprintf('mean debt/Y level in SP is: ');
fprintf('%5.4f \n ',  mean(LevSP_SIM));

fprintf('welfare gain is: ');
fprintf('%.6f \n ',  mean(WfSIM));

result1 = [mean(SS);mean(SS_SP);mean(bindSIM);mean(bindSP_SIM);std(CA_SIM);std(CASP_SIM);mean(Lev_SIM);mean(LevSP_SIM);mean(WfSIM)];

%% 4.2 Normalized deviations (used in 5.2 to get sudden stop moments)
% Total Consumption, both regimes:
CtotalSIM=(omega.*ctSIM.^(-ita)+(1-omega).*ynSIM.^(-ita)).^(-1/ita);
CtotalSPSIM=(omega.*ctSP_SIM.^(-ita)+(1-omega).*ynSIM.^(-ita)).^(-1/ita);


% QUESTION: Is it OK directly use the detrend variables?

    %of total consumption
Ctotaldev=(CtotalSIM-mean(CtotalSIM))./mean(CtotalSIM);
CtotalSPdev=(CtotalSPSIM-mean(CtotalSPSIM))./mean(CtotalSPSIM);
    % of Real Exchange Rate
RERdev=(RER_SIM-mean(RER_SIM))./mean(RER_SIM);
RERSPdev=(RERSP_SIM-mean(RERSP_SIM))./mean(RERSP_SIM);
    % of total output
Ytotaldev=(Y_SIM-mean(Y_SIM))./mean(Y_SIM);  
YtotalSPdev=(YSP_SIM-mean(YSP_SIM))./mean(YSP_SIM);
    % of Tradables output
yTdev=(ytSIM-mean(ytSIM))./mean(ytSIM);

%% 5. Sudden Stop Moments
%% 5.1 Drop Near Events
clear SS_Index SScontrol
% Find Sudden Stop event indices
SS_Index=find(SS==1);               % SS_index is the index of sudden stop
SSSP_Index=find(SS_SP==1);          % the index for sudden stop in social planner 

%Take out some events that might cause before/after periods go out of bounds
% drops the first 3 and last 2 event
% Notice that ideally we shoule check if SS is the first or last period
SS_Index=SS_Index(1+nbd:end-nbd);

% temp1 is the distance of each sudden stop to the pervious distance
temp=SS_Index(2:end)-SS_Index(1:end-1);     % Distance between consecutive SS
temp1=[SS_Index(1);temp];                   % Distance to previous SS
temp=[temp;SS_Index(end)];                  % Distance to next SS

% throw=find(temp<=nbd | temp1<=nbd);

% When two SS events are very close (less than nbd), they are the same,
% discard the second one.

% throw is the index of sudden stops that needs to be droped
throw=find(temp1<=nbd);                     % Identify those close SS                     
SS((SS_Index(throw)))=0;                    % Change value of SS variable
SS_Index(throw)=[];                         % Discard from SS indices vector
SS=min(SS,0);                               % Clear SS vector
SS(SS_Index)=1;                             % New SS vector is 1 only at SS_index
% Notice that this line should be different from SS((SS_Index(throw)))=0;
% due to we drops the first and last 3 elements

%% 5.2 Financial amplification coefficients: Omega 
% Omega = drops in normal state / drops in crisis state, conditional on
% exogenous state


% 5.2.1 Exogenous state that can give rise to sudden stop

% Track all the exogeneous states that occuered in SSs
% Recall S_index is just exogenous state index  
% Find entries in S_index that show in SS_Index

% S_index(SS_Index) is all the possible exogenous state that can sudden stop
% SScontrol is the time that fall in a state that can sudden stop (but may not
% happen due to good NFA positive)
SScontrol=ismember(S_index,S_index(SS_Index)); 
% Find indices
SScontrol_Index=find(SScontrol==1);

% 5.2.2 In sudden stop exogenous state, but SS does not happens due to high B 

% Check when SS exogenous states happened but constraint was NOT binding
SSomega=(SScontrol==1 & SS==0);%(SScontrol==1 & bindSIM==0);
SSomega_Index=find(SSomega==1);

% 5.2.3 In sudden stop exogenous state, and SS does actually happens due to
% low B

% Check when SS exogenous states happened, there was a Curren Account 
% reversal and constraint was binding. These are events where responses are
% amplified by the debt constraint
SSomegaNume=(SScontrol==1 & CA_SIM>(mean(CA_SIM)+2*std(CA_SIM)) & bindSIM>0);
SSomegaNume_Index=find(SSomegaNume==1);

% Sudden stop crisis moments
fprintf('C drop in DE is: ');
fprintf('%5.4f \n ',  mean(Ctotaldev(SS_Index)));
fprintf('C drop in SP is: ');
fprintf('%5.4f \n ',  mean(CtotalSPdev(SS_Index)));
fprintf('RER depreciation in DE is: ');
fprintf('%5.4f \n ',  mean(RERdev(SS_Index)));
fprintf('RER depreciation in SP is: ');
fprintf('%5.4f \n ',  mean(RERSPdev(SS_Index)));
fprintf('CA/Y | SS in DE is: ');
fprintf('%5.4f \n ',  mean(CA_SIM(SS_Index)));
fprintf('CA/Y | SS in SP is: ');
fprintf('%5.4f \n ',  mean(CASP_SIM(SS_Index))); 
fprintf('yT drop | SS in DE is: ');
fprintf('%5.4f \n ',  mean(yTdev(SS_Index)));
fprintf('yT drop | SS in SP is: ');
fprintf('%5.4f \n ',  mean(yTdev(SSSP_Index)));

result2 = [mean(Ctotaldev(SS_Index));mean(CtotalSPdev(SS_Index));mean(RERdev(SS_Index));mean(RERSPdev(SS_Index));...
     mean(CA_SIM(SS_Index)); mean(CASP_SIM(SS_Index)); mean(yTdev(SS_Index)); mean(yTdev(SSSP_Index))];

% Financial amplificator coefficient: Average variable drop with binding 
% constraint / avg variable drop with NON-binging constraint
fprintf('Omega C in DE is: ');
fprintf('%5.4f \n ',  mean(Ctotaldev(SSomegaNume_Index))/mean(Ctotaldev(SSomega_Index)));
fprintf('Omega C in SP is: ');
fprintf('%5.4f \n ',  mean(CtotalSPdev(SSomegaNume_Index))/mean(CtotalSPdev(SSomega_Index)));
fprintf('Omega RER in DE is: ');
fprintf('%5.4f \n ',  mean(RERdev(SSomegaNume_Index))/mean(RERdev(SSomega_Index)));
fprintf('Omega RER in SP is: ');
fprintf('%5.4f \n ',  mean(RERSPdev(SSomegaNume_Index))/mean(RERSPdev(SSomega_Index)));
fprintf('Omega CA/Y | SS in DE is: ');
fprintf('%5.4f \n ',  mean(CA_SIM(SSomegaNume_Index))-mean(CA_SIM(SSomega_Index)));
fprintf('Omega CA/Y | SS in SP is: ');
fprintf('%5.4f \n ',  mean(CASP_SIM(SSomegaNume_Index))-mean(CASP_SIM(SSomega_Index))); 

result3 = [mean(Ctotaldev(SSomegaNume_Index))/mean(Ctotaldev(SSomega_Index));...
    mean(CtotalSPdev(SSomegaNume_Index))/mean(CtotalSPdev(SSomega_Index));...
    mean(RERdev(SSomegaNume_Index))/mean(RERdev(SSomega_Index));...
    mean(RERSPdev(SSomegaNume_Index))/mean(RERSPdev(SSomega_Index));...
    mean(CA_SIM(SSomegaNume_Index))-mean(CA_SIM(SSomega_Index));...
    mean(CASP_SIM(SSomegaNume_Index))-mean(CASP_SIM(SSomega_Index))];

%% 6. Sudden stop event analysis

% Number of events 
nE=length(SS_Index);

% For each event identify variables nbd periods before and after
for tt=1:nE
    %% States
    State_Event(tt,:)=S_index(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    % Binding constraint
    bind_Event(tt,:)=bindSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);    
    %% Exogenous state
    R_EventT(tt,:)=RSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    g_EventT(tt,:)=gSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd); 
    z_EventT(tt,:)=zSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd); 
    volg_EventT(tt,:)=volgSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd); 
    volz_EventT(tt,:)=volzSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd); 
    
    % Output
    yt_EventT(tt,:)=ytSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    yn_EventT(tt,:)=ynSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    
    %% Endogenous variables
    % Nontradables Price
    p_EventT(tt,:)=(pSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(pSIM))./mean(pSIM);    
    % Current Acount
    CA_EventT(tt,:)=CA_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);    
    % Next period debt
    bp_EventT(tt,:)=(bpSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(bpSIM))./mean(bpSIM); 
    % Consumption
    ct_EventT(tt,:)=(ctSIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(ctSIM))./mean(ctSIM);
    % Real exchange rate
    RER_EventT(tt,:)=RER_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd); 
    % Leverage
    Lev_EventT(tt,:)=Lev_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);    
    % Tax
    Tau_EventT(tt,:)=Tau_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);   
    % Analogous variables under Social planner's
    bindSP_Event(tt,:)=bindSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    pSP_EventT(tt,:)=(pSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(pSP_SIM))./mean(pSP_SIM); 
    CASP_EventT(tt,:)=CASP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    bpSP_EventT(tt,:)=(bpSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(bpSP_SIM))./mean(bpSP_SIM);
    ctSP_EventT(tt,:)=(ctSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd)-mean(ctSP_SIM))./mean(ctSP_SIM);
    RERSP_EventT(tt,:)=RERSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);
    LevSP_EventT(tt,:)=LevSP_SIM(SS_Index(tt)-nbd:SS_Index(tt)+nbd);     
end



%%%%%%%%%%%%%%%%%%%
% Event means
R_Event=mean(R_EventT);
yt_Event=mean(yt_EventT);
yn_Event=mean(yn_EventT);
g_Event=mean(g_EventT);
z_Event=mean(z_EventT);
volg_Event=mean(volg_EventT);
volz_Event=mean(volz_EventT);
p_Event=mean(p_EventT);
CA_Event=mean(CA_EventT);
bp_Event=mean(bp_EventT);
ct_Event=mean(ct_EventT);
Tau_Event=mean(Tau_EventT);
Lev_Event=mean(Lev_EventT);

pSP_Event=mean(pSP_EventT);
CASP_Event=mean(CASP_EventT);
bpSP_Event=mean(bpSP_EventT);
ctSP_Event=mean(ctSP_EventT);
LevSP_Event=mean(LevSP_EventT);
%%%%%%%%%%%%%%%

fprintf('Avg Tax before SS is: ');
fprintf('%5.4f \n ',  Tau_Event(nbd)*100); % tax one period before the event
fprintf('====================== \n ');
fprintf(' mean tax %5.4f \n ', mean(Tau_SIM)*100 );
fprintf('mean welfare %.6f \n ',  mean(WfSIM)*100 );

result4 = [Tau_Event(nbd)*100;  mean(Tau_SIM)*100; mean(WfSIM)*100];

%% 7. SS exogenous state before the state
% Determinte output and news on each event

%% 7.1 Find Exogenous state in each sudden stop event
% Unique element in each exogenous state: from small to large
z_unique = sort(unique(z));
g_unique = sort(unique(g));
volz_unique = sort(unique(volz));
volg_unique = sort(unique(volg));

% initialize
z_Case=zeros(size(State_Event));
g_Case=zeros(size(State_Event));
volz_Case=zeros(size(State_Event));
volg_Case=zeros(size(State_Event));

%find(z(1,:)==z_unique(ii)) is the column index of each state
for ii=1:length(z_unique)
    z_Case(ismember(State_Event,find(z(1,:)==z_unique(ii))))=ii;
end

for ii=1:length(g_unique)
    g_Case(ismember(State_Event,find(g(1,:)==g_unique(ii))))=ii;
end

for ii=1:length(volz_unique)
    volz_Case(ismember(State_Event,find(volz(1,:)==volz_unique(ii))))=ii;
end

for ii=1:length(volg_unique)
    volg_Case(ismember(State_Event,find(volg(1,:)==volg_unique(ii))))=ii;
end

%% 7.2 Take average to get a the probability of each state

% initialize
z_prob = zeros(length(z_unique),2*nbd+1);
g_prob = zeros(length(g_unique),2*nbd+1);
volz_prob = zeros(length(volz_unique),2*nbd+1);
volg_prob = zeros(length(volg_unique),2*nbd+1);

for ii=1:length(z_unique)
    z_prob(ii,:)=sum(z_Case==ii)/length(z_Case);
end 

for ii=1:length(g_unique)
    g_prob(ii,:)=sum(g_Case==ii)/length(g_Case);
end 

for ii=1:length(volz_unique)
    volz_prob(ii,:)=sum(volz_Case==ii)/length(volz_Case);
end 

for ii=1:length(volg_unique)
    volg_prob(ii,:)=sum(volg_Case==ii)/length(volg_Case);
end 


% ytB=find(yt(1,:)==Z(1));            % Bad output 
% ytA=find(yt(1,:)==Z(2));            % Average output
% ytG=find(yt(1,:)==Z(3));            % Good output

% news_Event=zeros(size(State_Event));
% newsB=[1,2,3];                      % Bad news indices
% newsB=[newsB,newsB+NSS];
% newsA=[4:6];                        % Average news indices
% newsA=[newsA,newsA+NSS];
% newsG=[7:9];                        % Good news indices
% newsG=[newsG,newsG+NSS];
% 
% for i=1:length(newsB)
%     news_Event(State_Event==newsB(i))=1;
%     news_Event(State_Event==newsA(i))=2;
%     news_Event(State_Event==newsG(i))=3;
%     yt_Event(State_Event==ytB(i))=1;
%     yt_Event(State_Event==ytA(i))=2;
%     yt_Event(State_Event==ytG(i))=3;
% end

% % News event averages
% news_EventG=sum(news_Event==3)/length(news_Event);
% news_EventA=sum(news_Event==2)/length(news_Event);
% news_EventB=sum(news_Event==1)/length(news_Event);
% % Output event averages
% yt_EventG=sum(yt_Event==3)/length(yt_Event);
% yt_EventA=sum(yt_Event==2)/length(yt_Event);
% yt_EventB=sum(yt_Event==1)/length(yt_Event);

% Event period grid
Event=[-nbd:1:nbd];

%% 8. Plots: just makes figures
margin=0.01;
plotgrid=500;
% run plot_cust % Program with stlye parameters for figures

%% 8.1 Ergodic Distribution
jump=[max(bpSIM)-min(bpSIM)+2*margin]/(plotgrid);
pic=figure;
[fk,xik] = ksdensity(bpSIM);
densityk=fk/sum(sum(fk));
H=plot(xik,densityk); 
set(H,'Color','r','Linewidth',1.5)
hXlabel=xlabel('Bond Holdings');
hYlabel=ylabel('Frequency');

hold on

[fk,xik] = ksdensity(bpSP_SIM);
densityk=fk/sum(sum(fk));
H=plot(xik,densityk,'-.'); 
hLegend=legend('Laissez Faire','Social Planner','location','northeast');
legend boxoff
xlim([bmin-margin,bmax]);
set(H,'Color','b','Linewidth',1.5)
set(gca,  'Box'         , 'off'     , 'TickDir'     , 'out'     ,'TickLength'  , [.02 .02] , 'YMinorTick'  , 'off     ' , 'YGrid' , 'off'      , 'XColor'      , [0 0 0],    'YColor'      , [0 0 0],    'LineWidth'   , 1      )  
set(gca, 'color', 'none')
set(hXlabel,'Fontsize',12)    
set(hYlabel,'Fontsize',12)   
set(hLegend,'Fontsize',12) 
title(sprintf('Ergodic Distribution: γ=%d ψ=%.1f ',gamma,psi))
saveas(gcf,sprintf('Plot/6Simulation/FigureA_Ergodic_rra%02dies%02d.png', gamma, psi*10));

%% 8.2 Event plots
pic=figure;
set(gcf,'position',[0,0,800,1200])

p1 = subplot(4,1,1,'align');
H=bar(Event, [z_prob(1,:)' z_prob(2,:)' z_prob(3,:)' z_prob(4,:)' z_prob(5,:)'] , 0.2, 'stack');
hTitle=title('Exogeneous States around Crisis');
hYlabel1=ylabel('Frequency');
hLegend1=legend('Worst Z', 'Bad Z', 'Avg Z', 'Good Z', 'Best Z','Location','eastoutside');
hXlabel1=xlabel('T');

p2 = subplot(4,1,2,'align');
H=bar(Event, [volz_prob(1,:)' volz_prob(2,:)' volz_prob(3,:)'] , 0.2, 'stack');
hYlabel2=ylabel('Frequency');
hLegend2=legend('Bad ZVol', 'Avg ZVol', 'Good ZVol','Location','eastoutside');
hXlabel2=xlabel('T');

p3 = subplot(4,1,3,'align');
H=bar(Event, [g_prob(1,:)' g_prob(2,:)' g_prob(3,:)' g_prob(4,:)' g_prob(5,:)'] , 0.2, 'stack');
hYlabel3=ylabel('Frequency');
hLegend3=legend('Worst G', 'Bad G', 'Avg G', 'Good G', 'Best G','Location','eastoutside');
hXlabel3=xlabel('T');

p4 = subplot(4,1,4,'align');
H=bar(Event, [volg_prob(1,:)' volg_prob(2,:)' volg_prob(3,:)'] , 0.2, 'stack');
hYlabel4=ylabel('Frequency');
hLegend4=legend('Bad GVol', 'Avg GVol', 'Good GVol','Location','eastoutside');
hXlabel4=xlabel('T');

set(hTitle,'Fontsize',15,'FontName'   , 'AvantGarde')
set([hYlabel1 hYlabel2 hYlabel3 hYlabel4],'Fontsize',15,'FontName'   , 'AvantGarde')   
set([hXlabel1 hXlabel2 hXlabel3 hXlabel4],'Fontsize',15,'FontName'   , 'AvantGarde')   
set([hLegend1 hLegend2 hLegend3 hLegend4],'Fontsize',15,'FontName'   , 'AvantGarde') 

% adjust the axis 
drawnow;
p2.Position = [p1.Position(1) p2.Position(2) p1.Position(3) p2.Position(4)];
p3.Position = [p1.Position(1) p3.Position(2) p1.Position(3) p3.Position(4)];
p4.Position = [p1.Position(1) p4.Position(2) p1.Position(3) p4.Position(4)];

saveas(gcf,sprintf('Plot/6Simulation/FigureB_CrisisState_rra%02dies%02d.png', gamma, psi*10));

%% 8.3 Event Study
pic=figure;

set(gcf,'position',[0,0,800,1200])
subplot(3,2,1)
H5=plot(Event,yt_Event/mean(ytSIM),'Linewidth',1.5);
hTitle5=title('yT');
hXlabel5=xlabel('T');
hYlabel5=ylabel('Deviation from mean');
ylim([(mean(ytSIM)-2*std(ytSIM))/mean(ytSIM),(mean(ytSIM)+0.5*std(ytSIM))/mean(ytSIM)]) 
set(gca, 'color', 'none')

subplot(3,2,2)
H6=plot(Event,volg_Event/mean(volgSIM),'Linewidth',1.5);
hTitle6=title('Vol');
hXlabel6=xlabel('T');
hYlabel6=ylabel('Deviation from mean');
ylim([(mean(volgSIM)-2*std(volgSIM))/mean(volgSIM),(mean(volgSIM)+0.5*std(volgSIM))/mean(volgSIM)]) 
set(gca, 'color', 'none')

subplot(3,2,3)
H1=plot(Event,p_Event,Event,pSP_Event,'-.','Linewidth',1.5);
hTitle1=title('Pn');
hLegend1=legend('LF', 'SP','Location','southeast');
hXlabel1=xlabel('T');
hYlabel1=ylabel('Deviation from mean');
set(gca, 'color', 'none')

subplot(3,2,4)
H2=plot(Event,bp_Event,Event,bpSP_Event,'-.','Linewidth',1.5);
hLegend2=legend('LF', 'SP','Location','southeast');
hXlabel2=xlabel('T');
hTitle2=title("B'");
hYlabel2=ylabel('Deviation from mean');
set(gca, 'color', 'none')

subplot(3,2,5)
H3=plot(Event,ct_Event,Event,ctSP_Event,'-.','Linewidth',1.5);
hLegend3=legend('LF', 'SP','Location','southeast');
hXlabel3=xlabel('T');
hTitle3=title('cT');
hYlabel3=ylabel('Deviation from mean');
set(gca, 'color', 'none')

subplot(3,2,6)
H4=plot(Event,CA_Event,Event,CASP_Event,'-.','Linewidth',1.5);
hLegend4=legend('LF', 'SP','Location','northeast');
hXlabel4=xlabel('T');
hTitle4=title('CA/Y');
hYlabel4=ylabel('Deviation from mean');
set(gca, 'color', 'none')

set([hTitle1 hTitle2 hTitle3 hTitle4 hTitle5 hTitle6],'Fontsize',12)
set([hXlabel1 hXlabel2 hXlabel3 hXlabel4 hXlabel5 hXlabel6] ,'Fontsize',12)   
set([hYlabel1 hYlabel2 hYlabel3 hYlabel4 hYlabel5 hYlabel6] ,'Fontsize',12) 
set([hLegend1 hLegend2 hLegend3 hLegend4],'Fontsize',12) 

saveas(gcf,sprintf('Plot/6Simulation/FigureC_CrisisDynamic_rra%02dies%02d.png', gamma, psi*10));



%% 9. write tables
tablename=[...
    "IES $\psi$";...
    "RRA $\gamma$";...
    "(b/y) (\%) DE";...
    "(b/y) (\%) SP";...
    "std(ca/y) (\%) DE";...
    "std(ca/y) (\%) SP";...
    "Prob of Crisis (\%) DE";...
    "Prob of Crisis (\%) SP";...
    "Prob of Binding (\%) DE";...
    "Prob of Binding (\%) SP";...
    "Macroprudential Tax (\%)";...
    "Welfare gain (\%)";...
    "$\Delta c$ (\%) DE";...
    "$\Delta c$ (\%) SP";...
    "$\Delta {rer}$ (\%) DE";...
    "$\Delta {rer}$ (\%) SP";...
    "$\Delta {ca/y}$ (\%) DE";...
    "$\Delta {ca/y}$ (\%) SP";...
    "$\Omega_c$ DE";...
    "$\Omega_c$ SP";...
    "$\Omega_{rer}$ DE";... 
    "$\Omega_{rer}$ SP";...
    "$\Omega_{ca/y}$ (\%) DE";... 
    "$\Omega_{ca/y}$ (\%) SP";...
    "Tax Before Crisis (\%)"] ;

tablevalues=[
    psi;...
    gamma;...
    mean(Lev_SIM)*100;...
    mean(LevSP_SIM)*100;...
    std(CA_SIM)*100;...
    std(CASP_SIM)*100;...
    mean(SS)*100;...
    mean(SS_SP)*100;...
    mean(bindSIM)*100;...
    mean(bindSP_SIM);...
    mean(Tau_SIM)*100;...
    mean(WfSIM)*100;...
    mean(Ctotaldev(SS_Index))*100;...
    mean(CtotalSPdev(SS_Index))*100;...
    mean(RERdev(SS_Index))*100;...
    mean(RERSPdev(SS_Index))*100;...
    mean(CA_SIM(SS_Index))*100;...
    mean(CASP_SIM(SS_Index))*100;...
    mean(Ctotaldev(SSomegaNume_Index))/mean(Ctotaldev(SSomega_Index));...
    mean(CtotalSPdev(SSomegaNume_Index))/mean(CtotalSPdev(SSomega_Index));...
    mean(RERdev(SSomegaNume_Index))/mean(RERdev(SSomega_Index));...
    mean(RERSPdev(SSomegaNume_Index))/mean(RERSPdev(SSomega_Index));...
    mean(CA_SIM(SSomegaNume_Index))-mean(CA_SIM(SSomega_Index))*100;...
    mean(CASP_SIM(SSomegaNume_Index))-mean(CASP_SIM(SSomega_Index))*100;...
    Tau_Event(nbd)*100];

% table_moments = table(tablename,tablevalues);
% writetable(table_moments, 'CalibMomen','FileType',"spreadsheet",'Sheet',"1", 'Range','A1');
table_moments = table(tablevalues);
writetable(table_moments,'CalibMomen','FileType',"spreadsheet",'Sheet',"1", 'Range','I1');